name: CI - Increment Version on Merge
on:
  push:
    branches:
      - main
    paths:
      - 'dist/**'
      - 'action.yml'

concurrency:
  group: ${{ github.workflow }}

jobs:
  build:
    uses: ./.github/workflows/build.yml

  tests:
    uses: ./.github/workflows/tests.yml

  increment-version:
    needs: [build, tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # See https://github.com/im-open/git-version-lite for more details around how to increment major/minor/patch through commit messages
      - name: Increment the version
        uses: im-open/git-version-lite@v2.2.0
        id: version
        with:
          create-ref: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          default-release-type: major

      - name: Create Major and Latest Releases
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const majorOnlyTag = '${{ steps.version.outputs.NEXT_VERSION }}'.split('.')[0];
            const sha = context.sha;

            const tagExists = async tag => {
              try {
                const { data } = await github.rest.git.getRef({
                  ...context.repo,
                  ref: `tags/${tag}`
                });
                return data ? true : false;
              }
              catch (e) {
                if (e.status === 404) return false;
                throw new Error(`Retrieving refs failed with the following error: ${e}`)
              }
            }

            const upsertRef = async tag => {
              const payload = {
                ...context.repo,
                sha
              };

              const foundTag = await tagExists(tag);
              console.debug(`Tag [${tag}] is found?`, foundTag);
              
              if (foundTag) {
                await github.rest.git.updateRef({
                  ...payload,
                  ref: `tags/${tag}`,
                  force: true
                });
                return;
              }  
              github.rest.git.createRef({
                ...payload,
                ref: `refs/tags/${tag}`,
              });
            };

            await upsertRef(majorOnlyTag);
